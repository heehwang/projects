import java.util.ArrayList;

public class Proof {

	private TheoremSet thms;
	private ProofNode myRoot;
	private ProofNode curShowNode;
	private LineNumber myLineNumber;
	private boolean firstShow;
	private int canAssume;

	public Proof(TheoremSet theorems) {
		theorems = theorems;
		myLineNumber = new LineNumber();
		firstShow = true;
		canAssume = 0;
	}

	public LineNumber nextLineNumber() {
		try {
			myLineNumber = myLineNumber.increment();
		} catch (IllegalLineException e) {
			System.err.println("this line should never be printed");
		}
		canAssume++;
		return myLineNumber;
	}

	public void extendProof(String x) throws IllegalLineException,
			IllegalInferenceException {
		int firstSpace = x.indexOf(' ');
		try {
			if (x.substring(0, firstSpace).equals("show")) {
				curShowNode = show(x.substring(firstSpace + 1));
			} else if (x.substring(0, firstSpace).equals("assume")) {
				assume(x.substring(firstSpace + 1));
			} else if (x.substring(0, firstSpace).equals("ic")) {
				int secondSpace = x.indexOf(' ', firstSpace + 1);
				ic(x.substring(firstSpace + 1, secondSpace),
						x.substring(secondSpace + 1));
			} else if (x.subSequence(0, firstSpace).equals("co")) {
				int secondSpace = x.indexOf(' ', firstSpace + 1);
				int thirdSpace = x.indexOf(' ', secondSpace + 1);
				co(x.substring(firstSpace + 1, secondSpace),
						x.substring(secondSpace + 1, thirdSpace),
						x.substring(thirdSpace + 1));
			} else if (x.subSequence(0, firstSpace).equals("mp")) {
				int secondSpace = x.indexOf(' ', firstSpace + 1);
				int thirdSpace = x.indexOf(' ', secondSpace + 1);
				mp(x.substring(firstSpace + 1, secondSpace),
						x.substring(secondSpace + 1, thirdSpace),
						x.substring(thirdSpace + 1));

			} else if (x.subSequence(0, firstSpace).equals("repeat")) {
				int secondSpace = x.indexOf(' ', firstSpace + 1);
				String replacedProof = repeat(
						x.substring(firstSpace + 1, secondSpace),
						x.substring(secondSpace + 1));
				extendProof(replacedProof);
			} else {
				applyThm(x.substring(0, firstSpace + 1),
						x.substring(firstSpace + 1));
			}

		} catch (IllegalLineException e) {
			myLineNumber.stayOnThisLineNumber();
			canAssume--;
			throw e;
		} catch (IllegalInferenceException e) {
			myLineNumber.stayOnThisLineNumber();
			canAssume--;
			throw e;
		}
	}

	public ProofNode show(String expr) throws IllegalLineException {
		canAssume = 0;
		Expression e = new Expression(expr);
		if (firstShow) {
			firstShow = false;
			myRoot = new ProofNode(myLineNumber, e, null);
			return myRoot;
		}
		curShowNode.addChild(myLineNumber, e);
		int lastIndex = curShowNode.myChildren.size() - 1;
		myLineNumber.nesting(false);
		return curShowNode.myChildren.get(lastIndex);
	}

	public void assume(String expr) throws IllegalLineException,
			IllegalInferenceException {
		if (canAssume != 1) {
			throw new IllegalInferenceException("cannot use assume");
		}
		Expression e = new Expression(expr);
		Expression left = curShowNode.myExpr.myLeft();
		// left.print();
		// System.out.println();
		Expression not = new Expression("~" + curShowNode.myExpr.toString());
		// not.print();
		// System.out.println();
		if (!left.equals(e) && !not.equals(e)) {
			throw new IllegalInferenceException("cannot use assume");
		}
		curShowNode.addChild(myLineNumber, e);
	}

	public void co(String l1, String l2, String expr)
			throws IllegalLineException, IllegalInferenceException {
		LineNumber ln1 = new LineNumber(l1);
		LineNumber ln2 = new LineNumber(l2);
		ProofNode p1 = search(ln1);
		ProofNode p2 = search(ln2);
		if (!p1.myExpr.equals(new Expression("~" + p2.myExpr.toString()))
				&& !p2.myExpr
						.equals(new Expression("~" + p1.myExpr.toString()))) {
			throw new IllegalInferenceException("cannot use co");
		}
		Expression e = new Expression(expr);
		curShowNode.addChild(myLineNumber, e);
	}

	public void mp(String linum1, String linum2, String expr)
			throws IllegalLineException, IllegalInferenceException {

		LineNumber l1 = new LineNumber(linum1);
		LineNumber l2 = new LineNumber(linum2);

		ProofNode p1 = search(l1);
		if (p1 == null) {
			return;
		}
		ProofNode p2 = search(l2);
		if (p2 == null) {
			return;
		}
		Expression e = new Expression(expr);

		if ((p1.myExpr.getMyItem()).equals("=>")
				&& !((p2.myExpr.getMyItem()).equals("=>"))) {
			if (!(p1.myExpr.myLeft()).equals(p2.myExpr)
					|| !(p1.myExpr.myRight()).equals(e))
				throw new IllegalInferenceException("cannot use mp");
		} else if ((p2.myExpr.getMyItem()).equals("=>")
				&& !(p1.myExpr.getMyItem()).equals("=>")) {
			if (!(p1.myExpr.myLeft()).equals(p1.myExpr)
					|| !(p2.myExpr.myRight()).equals(e))
				throw new IllegalInferenceException("cannot use mp");
		}
		curShowNode.addChild(myLineNumber, e);
	}

	public void ic(String l1, String expr) throws IllegalLineException,
			IllegalInferenceException {
		LineNumber ln1 = new LineNumber(l1);
		ProofNode p1 = search(ln1);
		// p.myExpr.print();
		Expression e = new Expression(expr);
		// e.myRight().print();
		if (!e.myRight().equals(p1.myExpr)) {
			throw new IllegalInferenceException("cannot use ic");
		}
		curShowNode.addChild(myLineNumber, e);
	}

	public String repeat(String l1, String expr) throws IllegalLineException,
			IllegalInferenceException {
		LineNumber ln1 = new LineNumber(l1);
		ProofNode p1 = search(ln1);
		// Expression e = new Expression(expr);
		return p1.myExpr.toString();
	}

	public void applyThm(String thmName, String expr) {
		// Expression e = new Expression(expr);
		// if(!thms.contains(thmName)){
		// throw new IllegalLineException("no such theorem");
		// }
	}

	public ProofNode search(LineNumber ln) throws IllegalLineException {
		return search(curShowNode, ln);
	}

	private static ProofNode search(ProofNode p, LineNumber ln)
			throws IllegalLineException {
		if (p == null) {
			throw new IllegalLineException("cannot reference line");
		}
		for (int i = 0; i < p.myChildren.size(); i++) {
			ProofNode child = p.myChildren.get(i);
			if (child.myLineNumber.equals(ln)) {
				return child;
			}
		}
		return null;
	}

	public String toString() {
		return "";
	}

	public boolean isComplete() {
		int lastStep = curShowNode.myChildren.size() - 1;
		if (lastStep == -1) {
			return false;
		} else if (curShowNode.myExpr.equals(curShowNode.myChildren
				.get(lastStep).myExpr)) {
			if (curShowNode.equals(myRoot)) {
				return true;
			}
			curShowNode = curShowNode.parent();
			// System.out.println(myLineNumber);
			myLineNumber.nesting(true);
			// System.out.println(myLineNumber);
		}
		return false;

		/*
		 * 
		 * if(curShowNode.equals(myRoot)){ if(lastStep == -1){ return false; }
		 * return
		 * curShowNode.myExpr.equals(curShowNode.myChildren.get(lastStep).
		 * myExpr); } else{
		 * if(curShowNode.myExpr.equals(curShowNode.myChildren.get
		 * (lastStep).myExpr)){ curShowNode = curShowNode.parent();
		 * myLineNumber.nesting(true); } return false; }
		 */
	}

	private static class ProofNode {
		public LineNumber myLineNumber;
		public Expression myExpr;
		public ProofNode myParent;
		public ArrayList<ProofNode> myChildren;

		public ProofNode(LineNumber lineNumber, Expression expr,
				ProofNode parent) {
			myLineNumber = lineNumber;
			myExpr = expr;
			myParent = parent;
			myChildren = new ArrayList<ProofNode>();
		}

		public ProofNode parent() {
			return myParent;
		}

		public void addChild(LineNumber lineNumber, Expression expr) {
			ProofNode child = new ProofNode(lineNumber, expr, this);
			myChildren.add(child);
		}
	}
}
